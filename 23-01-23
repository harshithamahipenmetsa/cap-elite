Longest Substring with At Least K Repeating Characters:

class Solution {
    public int longestSubstring(String s, int k) {
        int freq[]=new int[26];
        char[] str = s.toCharArray();
        for(char c: str){
            int i=c-'a';
            freq[i]++;
        }
        boolean valid = true;
        int start=0;
        int maxlen=0;
        for(int j=0;j<s.length();j++){
            if(freq[str[j]-'a']>0 && freq[str[j]-'a']<k){
                String subString = s.substring(start,j);
                maxlen=Math.max(maxlen, longestSubstring(subString, k));
                start = j+1;
                valid = false;
            }
        }
        if(valid){
            return s.length();
        }
        else{
            return Math.max(maxlen, longestSubstring(s.substring(start), k));
        }
        
    }
}


First Unique Character in a String:

class Solution {
    public int firstUniqChar(String s) {
        int[] freq=new int[26];
        char[] chars=s.toCharArray();
        for(char c:chars){
            freq[c-'a']++;
        }
        for(int i=0; i<chars.length;i++){
            if(freq[chars[i]-'a']==1){
                return i;
            }
        }
        return -1;
    }
}


