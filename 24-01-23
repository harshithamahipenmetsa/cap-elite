1.Longest Substring Without Repeating Characters:

class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map<Character,Integer>map=new HashMap();
        int start=0,len=0;
        for(int end=0;end<s.length();end++){
            char c=s.charAt(end);
            if(map.containsKey(c)){
                if(start<=map.get(c)){
                    start=map.get(c)+1;
                }
            }
            len=Math.max(len,end-start+1);
            map.put(c,end);
        }
        return len;
    }
}

2.Binary Tree Inorder Traversal:

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        Stack<TreeNode> stack = new Stack();
        List<Integer> list = new ArrayList();
        while(!stack.isEmpty() || root != null){
            while(root != null){
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            list.add(root.val);
            root = root.right;
        }
        return list;
    }
}

3. 3Sum:

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
         List<List<Integer>> sum = new ArrayList<>();
         Arrays.sort(nums);
         for(int i=0; i<nums.length-2; i++){
             if(i==0 || (i>0 && nums[i] != nums[i-1])){
                 int a=i+1, b=nums.length-1;
                 while(a<b){
                     if(nums[a] + nums[b] == -1*nums[i]){
                         sum.add(Arrays.asList(nums[i],nums[a],nums[b]));
                         while(a<b && nums[a] == nums[a+1]) a++;
                         while(a<b && nums[b] == nums[b-1]) b--;
                         a++;
                         b--;
                     }else if(nums[a]+nums[b] < -1*nums[i])
                     {
                         a++;
                     }
                     else
                     {
                         b--;
                     }
                 }
             }  
        }
        return sum;
    }
}







