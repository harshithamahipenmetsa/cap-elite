1.Longest Substring Without Repeating Characters:

class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map<Character,Integer>map=new HashMap();
        int start=0,len=0;
        for(int end=0;end<s.length();end++){
            char c=s.charAt(end);
            if(map.containsKey(c)){
                if(start<=map.get(c)){
                    start=map.get(c)+1;
                }
            }
            len=Math.max(len,end-start+1);
            map.put(c,end);
        }
        return len;
    }
}

2.Binary Tree Inorder Traversal:

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        Stack<TreeNode> stack = new Stack();
        List<Integer> list = new ArrayList();
        while(!stack.isEmpty() || root != null){
            while(root != null){
                stack.push(root);
                root = root.left;
            }
            root = stack.pop();
            list.add(root.val);
            root = root.right;
        }
        return list;
    }
}

3.Binary Tree Preorder Traversal:

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> a =new ArrayList<>();
        preorder(root,a);
        return a;
    }
    void preorder(TreeNode root, List<Integer> a){
        if(root == null)
        return;
        a.add(root.val);
        preorder(root.left, a);
        preorder(root.right, a);
    }
}

4.Binary Tree Postorder Traversal:

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> a =new ArrayList<>();
        postorder(root,a);
        return a;
    }
    void postorder(TreeNode root, List<Integer> a){
        if(root == null)
        return;
        
        postorder(root.left, a);
        postorder(root.right, a);
        a.add(root.val);
    }
}






