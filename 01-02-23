Balanced Binary Tree:

class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null) return true;
        if(Math.abs(height(root.left) - height(root.right)) > 1) return false;
        return isBalanced(root.left) && isBalanced(root.right);
        }

        public int height(TreeNode node){
            if(node == null) return 0;
            return 1+ Math.max(height(node.left), height(node.right));

        }
}
    
Binary Tree Maximum Path Sum:

class Solution {
    public int maxPathSum(TreeNode root) {
        int maxValue[] = new int[1];
        maxValue[0] = Integer.MIN_VALUE;
        maxPathDown(root, maxValue);
        return maxValue[0];
    }
    private int maxPathDown(TreeNode node, int maxValue[]){
        if(node == null) return 0;
        int left = Math.max(0, maxPathDown(node.left, maxValue));
        int right = Math.max(0, maxPathDown(node.right, maxValue));
        maxValue[0] = Math.max(maxValue[0], left + right + node.val);
        return Math.max(left, right)+node.val;
    }
}
