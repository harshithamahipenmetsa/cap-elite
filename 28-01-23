1.Search in a Binary Search Tree:

class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        if(root == null){
            return root;
        }
        if(root.val == val){
            return root;
        }
        if(root.val > val){
            return searchBST(root.left,val);
        }
        return searchBST(root.right,val);
    }
}

2.Insert into a Binary Search Tree:

class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root == null){
            return new TreeNode(val);
        }
        if(val > root.val){
            root.right = insertIntoBST(root.right,val);
        }else{
            root.left = insertIntoBST(root.left,val);
        }
        return root;
    }
}

3.Path Sum:

class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null){
            return false;
        }
        if(root.left == null && root.right == null){
            return (targetSum-root.val)==0;
        }else{
             return hasPathSum(root.left, targetSum-root.val)||
        hasPathSum(root.right, targetSum-root.val);     
        }      
    }
}
