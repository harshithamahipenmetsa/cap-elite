Binary Tree Level Order Traversal:

class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> levelOrder(TreeNode root) {
         result = new ArrayList<>();
         if(root == null)
         return result;
         traverse(root,0);
         return result;
    }
    private void traverse(TreeNode node,int level){
        if(node==null){return ;} 
        if(result.size()==level){
            result.add(new ArrayList<>());

        }
        result.get(level).add(node.val);
        traverse(node.left,level+1);
        traverse(node.right,level+1);
    }

}
          

Binary Tree Zigzag Level Order Traversal:

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if(root == null){
            return new ArrayList();
        }
        List<List<Integer>> result = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList();
        queue.add(root);
        boolean reverseLevel = false;

        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer>level = new ArrayList<>();
            while(size > 0){
                root = queue.poll();
                level.add(root.val);
                if(root.left != null){
                    queue.add(root.left);
                }
                if(root.right != null){
                    queue.add(root.right);
                }
            }
            if(reverseLevel)Collections.reverse(level);
            result.add(level);
            reverseLevel = !reverseLevel;
        }
        return result;
    }
}
