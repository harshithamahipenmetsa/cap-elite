Binary Tree Level Order Traversal:

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
         List<List<Integer>> result = new ArrayList<>();
         if(root == null)
         return result;

         Queue<TreeNode> queue = new LinkedList<>();
         queue.add(root);
         while(!queue.isEmpty()){
             int size = queue.size();
             List<Integer> currLevel = new ArrayList<>();
             for(int i=0; i<size; i++){
                 TreeNode curr = queue.poll();
                 currLevel.add(curr.val);
                 if(curr.left != null){
                     queue.add(curr.left);
                 }
                 if(curr.right != null);{
                     queue.add(curr.right);
                 }
                 
             }
             result.add(currLevel);
         }
         return result;
    }
}

Binary Tree Zigzag Level Order Traversal:

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if(root == null){
            return new ArrayList();
        }
        List<List<Integer>> result = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList();
        queue.add(root);
        boolean reverseLevel = false;

        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer>level = new ArrayList<>();
            while(size > 0){
                root = queue.poll();
                level.add(root.val);
                if(root.left != null){
                    queue.add(root.left);
                }
                if(root.right != null){
                    queue.add(root.right);
                }
            }
            if(reverseLevel)Collections.reverse(level);
            result.add(level);
            reverseLevel = !reverseLevel;
        }
        return result;
    }
}
